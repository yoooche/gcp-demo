name: GCP deploy demo

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'docker-credential-gcr'

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }} .

      - name: Push Docker image to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      # Check and import all resources in one step - safer approach for existing resources
      - name: Import existing resources
        run: |
          cd terraform
          
          # Create a function to check if resource exists in GCP and import it
          import_if_exists() {
            local resource_type=$1
            local resource_id=$2
            local resource_path=$3
          
            # Check if resource exists in Terraform state
            if ! terraform state list | grep -q "$resource_type.$resource_id"; then
              echo "Importing $resource_type.$resource_id..."
              timeout 30s terraform import $resource_type.$resource_id $resource_path || echo "Import failed or resource doesn't exist"
            else
              echo "$resource_type.$resource_id already in Terraform state"
            fi
          }
          
          # Import each resource if it's not in state
          import_if_exists "google_compute_network" "vpc_network" "projects/${{ secrets.GCP_PROJECT_ID }}/global/networks/springboot-vpc"
          import_if_exists "google_compute_subnetwork" "subnet" "projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/subnetworks/springboot-subnet"
          import_if_exists "google_compute_firewall" "allow_http" "projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-http"
          import_if_exists "google_vpc_access_connector" "connector" "projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/vpcAccessConnectors/vpc-connector"
          import_if_exists "google_cloud_run_service" "springboot_app" "projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/services/springboot-app"
          import_if_exists "google_cloud_run_service_iam_member" "public_access" "projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/services/springboot-app/roles/run.invoker/allUsers"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="region=${{ secrets.GCP_REGION }}" -var="image_url=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}"

      # Check for conflicts in Terraform configuration
      - name: Check Resource Conflicts
        id: check_conflicts
        run: |
          cd terraform
          # Add -refresh=true to detect conflicts with existing resources
          terraform plan -refresh=true -detailed-exitcode -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="region=${{ secrets.GCP_REGION }}" -var="image_url=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}" || echo "Resource conflicts detected, checking terraform configuration"
          
          # Ensure all resources use create_if_not_exists or exists flags where applicable
          echo "Checking Terraform configuration for resource conflict resolution..."

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="region=${{ secrets.GCP_REGION }}" -var="image_url=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}"