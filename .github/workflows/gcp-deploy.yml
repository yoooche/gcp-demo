name: GCP deploy demo

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'docker-credential-gcr'

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }} .

      - name: Push Docker image to Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Check if resources exist in Terraform state
        id: check_state
        run: |
          cd terraform
          if terraform state list | grep -q "google_compute_network.vpc_network"; then
            echo "vpc_exists=true" >> $GITHUB_OUTPUT
          else
            echo "vpc_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if terraform state list | grep -q "google_compute_subnetwork.subnet"; then
            echo "subnet_exists=true" >> $GITHUB_OUTPUT
          else
            echo "subnet_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if terraform state list | grep -q "google_compute_firewall.allow_http"; then
            echo "firewall_exists=true" >> $GITHUB_OUTPUT
          else
            echo "firewall_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if terraform state list | grep -q "google_vpc_access_connector.connector"; then
            echo "connector_exists=true" >> $GITHUB_OUTPUT
          else
            echo "connector_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if terraform state list | grep -q "google_cloud_run_service.springboot_app"; then
            echo "cloud_run_exists=true" >> $GITHUB_OUTPUT
          else
            echo "cloud_run_exists=false" >> $GITHUB_OUTPUT
          fi
          
          if terraform state list | grep -q "google_cloud_run_service_iam_member.public_access"; then
            echo "iam_exists=true" >> $GITHUB_OUTPUT
          else
            echo "iam_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Import VPC if not exists
        if: steps.check_state.outputs.vpc_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_compute_network.vpc_network projects/${{ secrets.GCP_PROJECT_ID }}/global/networks/springboot-vpc || true

      - name: Import Subnet if not exists
        if: steps.check_state.outputs.subnet_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_compute_subnetwork.subnet projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/subnetworks/springboot-subnet || true

      - name: Import Firewall if not exists
        if: steps.check_state.outputs.firewall_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_compute_firewall.allow_http projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-http || true

      - name: Import VPC Connector if not exists
        if: steps.check_state.outputs.connector_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_vpc_access_connector.connector projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/vpcAccessConnectors/vpc-connector || true

      - name: Import Cloud Run Service if not exists
        if: steps.check_state.outputs.cloud_run_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_cloud_run_service.springboot_app projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/services/springboot-app || true

      - name: Import IAM Member if not exists
        if: steps.check_state.outputs.iam_exists == 'false'
        run: |
          cd terraform
          timeout 30s terraform import google_cloud_run_service_iam_member.public_access projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/services/springboot-app/roles/run.invoker/allUsers || true

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="region=${{ secrets.GCP_REGION }}" -var="image_url=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -var="region=${{ secrets.GCP_REGION }}" -var="image_url=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPO }}/springboot-app:${{ github.sha }}"